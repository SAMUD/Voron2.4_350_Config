[include DryFilament.cfg]
[include Autocommit.cfg]
[include KOMB.cfg]


#####################################################################
#   SET CHAMBER TEMPERATURE
#####################################################################
[gcode_macro SET_CHAMBER]
gcode:
  {% set chamber_target = params.CHAMBER_TEMP|default(0)|float %}
  SET_HEATER_TEMPERATURE heater=heater_chamber target={chamber_target}
  

#####################################################################
#   ON FILAMENT CHANGE BY SLICER
#####################################################################
[gcode_macro M600]
gcode:
    PAUSE                ; Pause

#####################################################
# Filament Runout from here: https://www.teamfdm.com/forums/topic/1497-filament-run-out-sensor-distance-after-triggered/
#####################################################

[gcode_macro PAUSE_AFTER_D]
description: Trigger to pause the print after a further 'xx' mm has been extruded
variable_end_d: 0 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
gcode:
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
  M400
  STATUS_ERROR
  {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
  {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
  SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
  M117 Pause at {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second

[delayed_gcode PAUSE_AT_D]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
  {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
  {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
    M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
  {% else %}
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
    M400
    PAUSE
    M117 Filament switch runout
  {% endif %}

#####################################################################
#   PAUSE from Ellis tuning guide: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
#####################################################################
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    M400
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        STATUS_ERROR
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                                  ; disable filament sensor
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                         ; enable filament sensor
        M400
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{280} Y{-2} F6000                                                                ; park toolhead at purge bucket
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

#####################################################################
#   RESUME from Ellis tuning guide: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
#####################################################################
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    STATUS_PRINTING

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                          ; enable filament sensor
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                         ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        SET_DISPLAY_TEXT MSG="Printer goes brrrrr"
        BASE_RESUME                                                                  ; resume print
    {% endif %}

#####################################################################
#   CANCEL from Ellis tuning guide: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
#####################################################################
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END BED={0}
    BASE_CANCEL_PRINT

#####################################################################
#   PARK THE NOZZLE
#####################################################################
#[gcode_macro PARK]
#gcode:
#    {% set th = printer.toolhead %}
#    G1 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30 F3000  


#####################################################################
#   HOME Y
#####################################################################
[gcode_macro HOME_Y]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set th = printer.toolhead %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    
    G0 F{travel_speed//2} 
    # move X axis to the middle
    G0 X{th.axis_maximum.x//2}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    #G1 Y{th.axis_maximum.y//2} F10000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}


#####################################################################
#   HOME X
#####################################################################
[gcode_macro HOME_X]
gcode:
    #{% set HOME_CUR = 0.700 %}
    #{% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    #{% set RUN_CUR = driver_config.run_current %}
    {% set th = printer.toolhead %}
    # Set current for sensorless homing
    #SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    #G4 P2000
    # Home
    G28 X0
    # Move away
    # G90
    # G1 X{th.axis_maximum.x//2} F10000
    # Set current during print
    #SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}

#####################################################################
#  G32 - Homing sequence
#####################################################################
[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28 Z
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

#####################################################################
#   PRINT_START - called from slicer
#####################################################################
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE|string %}
  {% set target_chamber = params.CHAMBER|default("0")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  {% set PROBE_TEMP = 150 %}
  {% set MAX_TEMP = PROBE_TEMP + 5 %}
  {% set ACTUAL_TEMP = printer.extruder.temperature %}

  STOP_DRYER

  ## When directly restarting a print, cancel the print_end loop running for air cleaning
  UPDATE_DELAYED_GCODE ID=PRINT_END_TIMER DURATION=0

  ## Directly start heating the bed and extruder to save time later
  M140 S{target_bed}


  ## Also directly start heating chamber.
  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" or FILAMENT_TYPE == "PC" %}
    #Those filament require a heated chamber
    {% if printer["heater_generic heater_chamber"].temperature >= 40|float%}
      #chamber is already hot, because we just did a print before. No heatsoak needed
      #Just set target temp and we are good to go
      SET_CHAMBER CHAMBER_TEMP={target_chamber}
      # no heatsoak is needed. This means we can heat up the nozzle right now. If we do it while we need a heatsoak we will cook the filament in the tip
      M104 S150
    {% else %}
      #Printer is still cold. Heatsoak needed
        M106 S204 #part cooling fan 80% for even more air circulation   
       SET_CHAMBER CHAMBER_TEMP={target_chamber} #+1 °C for faster temp target arrival
    {% endif %}
  {% else %}
    # no heatsoak is needed. This means we can heat up the nozzle right now. If we do it while we need a heatsoak we will cook the filament in the tip
    M104 S150
  {% endif %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  {% if "xyz" not in printer.toolhead.homed_axes %}
    SET_DISPLAY_TEXT MSG="Homing printer"
    STATUS_HOMING         # Sets SB-leds to homing-mode
    G28                   # Full home (XYZ)
  {% endif %}
  G90                   # Absolut position
  M400
  
  ##  Uncomment for bed mesh (1 of 2)
  EXCLUDE_OBJECT_DEFINE
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  ##Now do the final heatsoak if needed
  STATUS_HEATING
  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" or FILAMENT_TYPE == "PC" %}
    #Those filament require a heated chamber
    #Target temperature has been set above. Just wait
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber-10}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="heater_generic heater_chamber" MINIMUM={target_chamber-10} #wait until chamber temp is very nearly reached
  {% endif %}
  M107 #part cooling fan off again

  STATUS_CLEANING
  SET_DISPLAY_TEXT MSG="Starting nozzle cleaning."  # Displays info
  KOMB
  M106 S204 #part cooling fan 80% for even more air circulation
  M400
  STATUS_HEATING

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Waiting for hotend..."          # Displays info
  #{% if ACTUAL_TEMP > MAX_TEMP %}
  #   { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
  #   M106 S204                                           # Fan at full power
  #{% endif %}
  # Heats the nozzle to 150c
  M104 S150
  TEMPERATURE_WAIT SENSOR="extruder" MINIMUM=149 MAXIMUM=155 #Use this with M104 to avoid waiting for an exact temperature. If its +- few degrees its ok
  M106 S0

  SET_DISPLAY_TEXT MSG="Waiting for bed..."    # Displays info
  M190 S{target_bed}                           # Check if bed is hot

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  {% if printer.quad_gantry_level.applied == False %}
    SET_DISPLAY_TEXT MSG="QGL"      # Displays info
    STATUS_LEVELING                 # Sets SB-leds to leveling-mode
    quad_gantry_level               # Levels the buildplate via QGL
    G28 Z                           # Homes Z again after QGL
  {% endif %}
  M400

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Running bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE               # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Heating Hotend to printing temp: {target_extruder}c"             # Displays info
  M104 S{target_extruder}                                       # Heats the nozzle to printing temp, start it here, to save time while moving to smartPark
  M107                                                          # Turns off partcooling fan
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  PARKPURGE
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_FAN_SPEED FAN=stealthmax SPEED=0.4
  STATUS_CLEANING
  SET_DISPLAY_TEXT MSG="Purging nozzle"             # Displays info
  #G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  #G0 Z0.4                                          # Raises Z to 0.4
  #G91                                              # Incremental positioning 
  #G1 X100 E20 F1000                                # Purge line
  #G90                                              # Absolut position
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                          ;  filament sensor
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                         ;  filament sensor
  M400
  LINE_PURGE
  M400
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                          ;  filament sensor
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                         ;  filament sensor
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0                              ; if the delayed gcode was triggered during loading of filament or so we disable it again before start of print
  
  SET_DISPLAY_TEXT MSG="Printer goes brrrrr"       # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode

#####################################################################
#   PRINT_END - called from slicer
#####################################################################
[gcode_macro PRINT_END]
gcode:
  # safe anti-stringing move coords
  {% set th = printer.toolhead %}
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
  {% set target_bed = params.BED|int %}
  
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0      ; if the delayed gcode was triggered we disable it here
  
   
  M400                                                # wait for buffer to clear
  G92 E0                                              # zero the extruder
  G1 E-5.0 F1800                                      # retract filament
  G90                                                 # absolute positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe}             # move nozzle to remove stringing
  G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2}  # park nozzle at rear
  M400

  ;{% if target_bed|int > 70 %}                      # Bed is hotter than 70 degrees
    SET_DISPLAY_TEXT MSG="Waiting for cooldown & proper air"         # Displays info
    STATUS_COOLING                                      # Sets SB-leds to cooldown
    TURN_OFF_HEATERS
    M106 S204                                           # Part cooling fan at 80%
    SET_FAN_SPEED FAN=stealthmax SPEED=1
    SET_CHAMBER CHAMBER_TEMP={ 0 }                      
    SET_GCODE_VARIABLE MACRO=PRINT_END_STATUS VARIABLE=time_remaining VALUE=600
    UPDATE_DELAYED_GCODE ID=PRINT_END_TIMER DURATION=1
  ;{% endif %} 

[delayed_gcode PRINT_END_TIMER]
gcode:
    UPDATE_DELAYED_GCODE ID=PRINT_END_TIMER DURATION=1
    PRINT_END_STATUS
   

[gcode_macro PRINT_END_STATUS]
variable_time_remaining: 0
gcode:
    {% if time_remaining > 0 %}
        ;M117 Cooling down... { time_remaining }s / 600s
         SET_GCODE_VARIABLE MACRO=PRINT_END_STATUS VARIABLE=time_remaining VALUE={time_remaining - 1}
         SET_DISPLAY_TEXT MSG="Cleaning air... { time_remaining }s / 600s"         # Displays info
         SET_CHAMBER CHAMBER_TEMP={ 80 }                     # Simulating that we want to heat the chamber, so the nevermore fans are running full power and clean the air
    {% else %}
        UPDATE_DELAYED_GCODE ID=PRINT_END_TIMER DURATION=0
        STATUS_PART_READY                                   # LEDs to part ready
        TURN_OFF_HEATERS
        M107                                                # Turn off the fans
        SET_FAN_SPEED FAN=stealthmax SPEED=0

        BED_MESH_CLEAR
        RESTORE_GCODE_STATE NAME=STATE_PRINT_END
        SET_DISPLAY_TEXT MSG="Finished... Starting Backup..."
        BACKUP_CFG
        SET_DISPLAY_TEXT MSG="Finished... Backup Done..."
    {% endif %}


[gcode_macro PRINT_END_NOW]
description: Stops waiting for cooldown and end the print immediately
gcode:
    UPDATE_DELAYED_GCODE ID=PRINT_END_TIMER DURATION=0
    STATUS_PART_READY                                   # LEDs to part ready
    TURN_OFF_HEATERS
    M107                                                # Turn off the fans
    SET_FAN_SPEED FAN=stealthmax SPEED=0

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    SET_DISPLAY_TEXT MSG="Finished... Starting Backup..."
    BACKUP_CFG
    SET_DISPLAY_TEXT MSG="Finished... Backup Done..."

    
#####################################################################
# Unload Filament
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                                  ; disable filament sensor
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                         ; enable filament sensor
  M400
  M83                            ; set extruder to relative
  G1 E10 F300                    ; extrude a little to soften tip
  G1 E-50 F1800                  ; retract some, but not too much or it will jam
  G1 E-25 F1800                  ; retract some, but not too much or it will jam
  M82
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                                 ; disable filament sensor
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                        ; enable filament sensor
  M400


#####################################################################
# Load Filament
#####################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                                  ; disable filament sensor
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                         ; enable filament sensor
  M400
  M83                            ; set extruder to relative
  G1 E40 F1800                    ; load
  G1 E10 F300                    ; load
  G1 E35 F150                    ; prime nozzle with filament
  M82                            ; set extruder to absolute
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                                  ; disable filament sensor
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                         ; enable filament sensor
  M400

#####################################################################
# OFF
#####################################################################

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=stealthmax SPEED=0
    STATUS_OFF
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off



######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    # {% set X = params.X|default(50)|float %}
    # {% set Y = params.Y|default(0)|float %}
    # {% set Z = params.Z|default(10)|float %}
    # SAVE_GCODE_STATE NAME=M600_state
    # PAUSE
    # G91
    # G1 E-.8 F2700
    # G1 Z{Z}
    # G90
    # G1 X{X} Y{Y} F3000
    # G91
    # G1 E-50 F1000
    # RESTORE_GCODE_STATE NAME=M600_state

    # this is for mobileraker notifications
    # https://github.com/Clon1998/mobileraker_companion/blob/main/docs/Custom_Notifications.md
    M117 $MR$: M600 change filament!  
    PAUSE

######################################################################
# Park front center
######################################################################
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

######################################################################
# Park purge bucket
######################################################################
[gcode_macro PARKPURGE]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKPURGE
    G90                               ; absolute positioning
    G0 X{280} Y{-2} Z{10} F6000        
    RESTORE_GCODE_STATE NAME=PARKPURGE

######################################################################
# Park front center, but low down.
######################################################################
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

######################################################################
# Park at center of build volume
###################################################################### 
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

######################################################################
# # Park 15mm above center of bed
######################################################################   
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED


   